// This file is generated by Firebase Extensions Studio
'use server';
/**
 * @fileOverview Filters aggregated RSS feeds to identify and prioritize the most relevant and important news articles for reformatting.
 *
 * - filterRelevantNews - A function that handles the filtering process.
 * - FilterRelevantNewsInput - The input type for the filterRelevantNews function.
 * - FilterRelevantNewsOutput - The return type for the filterRelevantNews function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const FilterRelevantNewsInputSchema = z.object({
  articles: z.array(
    z.object({
      title: z.string().describe('The title of the news article.'),
      description: z.string().describe('A short description or summary of the article.'),
      link: z.string().describe('The URL of the news article.'),
      source: z.string().describe('The source or region of the news article (e.g., Korea, China, USA).'),
    })
  ).describe('An array of news articles from various RSS feeds.'),
});
export type FilterRelevantNewsInput = z.infer<typeof FilterRelevantNewsInputSchema>;

const FilterRelevantNewsOutputSchema = z.array(
  z.object({
    title: z.string().describe('The title of the news article.'),
    description: z.string().describe('A short description or summary of the article.'),
    link: z.string().describe('The URL of the news article.'),
    source: z.string().describe('The source or region of the news article.'),
    relevanceScore: z.number().describe('A score indicating the relevance and importance of the article (0-1).'),
    reason: z.string().describe('A concise, one-sentence reason why this article is important enough for the front page.'),
    category: z.enum(["Politics", "Business", "Technology", "Science", "Culture"]).describe('The category of the news article.'),
  })
).describe('An array of the most relevant news articles, with a relevance score and category for each.');
export type FilterRelevantNewsOutput = z.infer<typeof FilterRelevantNewsOutputSchema>;

export async function filterRelevantNews(input: FilterRelevantNewsInput): Promise<FilterRelevantNewsOutput> {
  // Limit to 50 articles to avoid exceeding context window
  const limitedInput = { articles: input.articles.slice(0, 50) };
  return filterRelevantNewsFlow(limitedInput);
}

const filterRelevantNewsPrompt = ai.definePrompt({
  name: 'filterRelevantNewsPrompt',
  input: {schema: FilterRelevantNewsInputSchema},
  output: {schema: FilterRelevantNewsOutputSchema},
  prompt: `You are the Editor-in-Chief of a prestigious global newspaper like the New York Times. You are reviewing a list of incoming stories from the newswire.

Your task is to act as a discerning gatekeeper. You must:
1.  Analyze the provided list of articles.
2.  Identify the stories with the highest global significance, potential impact, and reader interest.
3.  Assign a 'relevanceScore' from 0.0 to 1.0 to each article, where 1.0 is a must-print, front-page story.
4.  For each selected article, provide a concise, one-sentence 'reason' explaining its newsworthiness, as if you were justifying its placement to your editorial board.
5.  Assign a 'category' to each article from the following list: Politics, Business, Technology, Science, Culture.
6.  Return an array of the articles you have selected. Only include articles with a relevance score of 0.5 or higher.

Consider these factors in your judgment:
*   **Global Impact:** Does this affect international politics, the world economy, or major global cultures?
*   **Urgency & Timeliness:** Is this breaking news? Does it represent a significant development in an ongoing story?
*   **Originality:** Is this a unique story or a rehash of something already widely reported?
*   **Human Interest:** Does the story have a compelling human element?

Do not just summarize the articles. Your role is to curate and prioritize. Be selective and ruthless in your judgment.

Incoming articles from the newswire:
{{{json articles}}}
`, 
});

const filterRelevantNewsFlow = ai.defineFlow(
  {
    name: 'filterRelevantNewsFlow',
    inputSchema: FilterRelevantNewsInputSchema,
    outputSchema: FilterRelevantNewsOutputSchema,
  },
  async input => {
    const {output} = await filterRelevantNewsPrompt(input);
    return output!;
  }
);
